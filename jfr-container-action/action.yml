name: 'jfr-container-action'
description: 'Run the Jenkins pipeline with Jenkinsfile-runner in the predefined container'
inputs:
  command:
    description: Jenkinsfile-runner command, i.e; run or lint
    default: run
    required: false
  jenkinsfile:
    description: Jenkinsfile location to test
    default: Jenkinsfile
    required: true
  pluginstxt:
    description: plugins list relative location in the repository
    default: plugins.txt
    required: false   
  jcasc:
    description: Jenkins CasC file
    required: false
  isPluginCacheHit:
    description: The plugin cache hit status. If you use actions/cache outside, you can simply give its output as input here.
    required: false
    default: false 
runs:
  using: "composite"
  steps:
    - name: Set up Jenkins war package
      run: jar -cvf /app/jenkins/jenkins.war /app/jenkins/* && mkdir -p /jenkins_new_plugins && mkdir -p /jenkinsHome && mkdir /app/jenkins/WEB-INF/groovy.init.d && cp ${GITHUB_ACTION_PATH}/init.groovy /app/jenkins/WEB-INF/groovy.init.d/
      shell: bash
    - name: Download plugins
      if: ${{inputs.isPluginCacheHit != 'true'}}
      run: ${GITHUB_ACTION_PATH}/download.sh ${{inputs.pluginstxt}}
      shell: bash
    - name: Move cache
      if: ${{inputs.isPluginCacheHit == 'true'}}
      run: ls -al /jenkins_new_plugins && cp -r /jenkins_new_plugins/* /usr/share/jenkins/ref/plugins
      shell: bash
    - name: Run Jenkins pipeline in the predefined container
      run: ${GITHUB_ACTION_PATH}/setup.sh ${{inputs.command}} ${{inputs.jenkinsfile}} ${{inputs.jcasc}}
      shell: bash