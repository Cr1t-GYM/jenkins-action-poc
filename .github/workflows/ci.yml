name: Java CI
on: [push]
jobs:
  jenkins-runtime-pipeline:
    # Run all the actions in the on demand VM.
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]    
    runs-on: ${{ matrix.os }}
    name: jenkins-runtime-pipeline-test
    steps:
      - uses: actions/checkout@v2
      - name : Setup Jenkins
        uses:
          ./jenkins-setup
      - name: Jenkins plugins download
        id: jenkins_plugins_download
        uses:
          ./jenkins-plugin-installation-action
        with:
          pluginstxt: jenkins-setup/plugins.txt
      - name: Run Jenkins pipeline
        id: run_jenkins_pipeline
        uses:
          ./jenkinsfile-runner-action
        with:
          command: run
          jenkinsfile: Jenkinsfile
          jcasc: jcasc.yml
  jenkins-container-pipeline:
    # Pull the Jenkinsfile-ruuner prebuilt container firstly and run all the actions in this container.
    runs-on: ubuntu-latest
    name: jenkins-prebuilt-container-test
    container:
      image: ghcr.io/jenkinsci/jenkinsfile-runner:master
    steps:
      - uses: actions/checkout@v2
      # Cache new plugins in /jenkins_new_plugins by hash(plugins.txt)
      - uses: actions/cache@v3
        id: cache-jenkins-plugins
        name: Cache Jenkins plugins
        with:
          path: /jenkins_new_plugins
          key: ${{ runner.os }}-plugins-${{ hashFiles('plugins_container.txt') }}      
      - name: Jenkins pipeline in the container
        id: jenkins_pipeline_container
        uses:
          ./jfr-container-action
        with:
          command: run
          jenkinsfile: Jenkinsfile
          pluginstxt: plugins_container.txt
          jcasc: jcasc.yml
          isPluginCacheHit: ${{steps.cache-jenkins-plugins.outputs.cache-hit}}
      # Upload pipeline log in /jenkinsHome/jobs/job/builds
      - name: Upload pipeline Artifacts
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: actions/upload-artifact@v3
        with:
          name: jenkins-container-pipeline-log
          path: /jenkinsHome/jobs/job/builds
  jenkins-static-image-pipeline:
    runs-on: ubuntu-latest
    name: jenkins-static-image-pipeline-test
    steps:
      # Run in the on demand VM. GitHub Action helps to map the workspace into the following container.
      - uses: actions/checkout@v2
      # Run in the Jenkins container which presents inside the on demand VM.
      - name: Jenkins pipeline with the static image
        id: jenkins_pipeline_image
        uses:
          ./jfr-static-image-action
        with:
          command: run
          jenkinsfile: Jenkinsfile
          pluginstxt: plugins_container.txt
          jcasc: jcasc.yml      
      - name: Upload pipeline Artifacts
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: actions/upload-artifact@v3
        with:
          name: jenkins-static-image-pipeline-log
          path: jenkinsHome/jobs/job/builds
  jenkins-static-image-pipeline-with-base-image:
    runs-on: ubuntu-latest
    name: jenkins-static-image-pipeline-with-base-image
    strategy:
      matrix:
        baseImages: ['nginx:latest', 'node:18.3.0', 'node:18-alpine', 'python:3.8-alpine3.16']
    steps:
      # Run in the on demand VM. GitHub Action helps to map the workspace into the following container.
      - uses: actions/checkout@v2
      # Run in the Jenkins container which presents inside the on demand VM.
      - name: Jenkins pipeline with the static image
        id: jenkins_pipeline_base_image
        uses:
          ./jfr-static-image-action
        env:
          JENKINS_AWS_KEY: 123456
        with:
          command: run
          jenkinsfile: Jenkinsfile
          pluginstxt: plugins_container.txt
          jcasc: jcasc.yml
          baseImage: ${{ matrix.baseImages }}     
      - name: Upload pipeline Artifacts
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: actions/upload-artifact@v3
        with:
          name: jenkins-static-image-pipeline-log
          path: jenkinsHome/jobs/job/builds
